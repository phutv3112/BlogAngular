// <auto-generated />
using System;
using BlogAngular.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BlogAngular.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BlogAngular.Api.Models.Domain.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("EncryptedPrivateKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PublicKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "11872d42-f137-430d-a396-46498fc4e3a7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "11872d42-f137-430d-a396-46498fc4e3a7",
                            CreatedDate = new DateTime(2024, 11, 18, 7, 53, 35, 724, DateTimeKind.Utc).AddTicks(5236),
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            EncryptedPrivateKey = "nrJYiL6/e/g2lHpzTiAzoA==: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",
                            FullName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMeVbzVRLIFbCIbDMUfqQK2ZAvWaVSW8rTO+Z7y3z/2hGOoZnXwZjGv8OZPFnv6Q2w==",
                            PhoneNumberConfirmed = false,
                            PublicKey = "<RSAKeyValue><Modulus>xF0kkphslzIuc1TJvX5u2MzmLjyOo/mJAdretmlw05lQo9XWDFtxr2ydZuw8PJnJT436LZRxoYr86YpAG9nMHPlb/1VVOsQ3/DCt5QBoBYqqueNvHJtg9L0HVeVMPjRa3xE9ctwoKIfguEk+zmxIoDEETKyF8jz0L8T3T0VD0GWk02rN1vMrbBslfGwFbVS5Ick4V1NxpALJ1eYCCeKkoFUsFUHVOhI2P9XeSgkKZAs0/AGERmgji77T7US56wsOQmq/rmFmqksK8CJzMCbnFdWmwwcyDdYXU4L8/KTNFGENk40NxAnn8JiwzStwal9w95+qOXyHMRX+xGWvc6vIBQ==</Modulus><Exponent>AQAB</Exponent></RSAKeyValue>",
                            SecurityStamp = "11872d42-f137-430d-a396-46498fc4e3a7",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 11, 18, 7, 53, 35, 724, DateTimeKind.Utc).AddTicks(5241),
                            UserName = "admin@gmail.com"
                        });
                });

            modelBuilder.Entity("BlogAngular.Api.Models.Domain.BlogImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BlogImages");
                });

            modelBuilder.Entity("BlogAngular.Api.Models.Domain.BlogPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FeaturedImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UrlHandle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BlogPosts");
                });

            modelBuilder.Entity("BlogAngular.Api.Models.Domain.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UrlHandle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("BlogAngular.Api.Models.Domain.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BlogPostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BlogPostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("BlogAngular.Api.Models.Domain.PostLike", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("PostLikes");
                });

            modelBuilder.Entity("BlogAngular.Api.Models.Domain.PostTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("TagId");

                    b.ToTable("PostTags");
                });

            modelBuilder.Entity("BlogAngular.Api.Models.Domain.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("BlogPostCategory", b =>
                {
                    b.Property<Guid>("BlogPostsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoriesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BlogPostsId", "CategoriesId");

                    b.HasIndex("CategoriesId");

                    b.ToTable("BlogPostCategory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1e4be785-839a-4a52-a3b9-455f3e289c44",
                            ConcurrencyStamp = "1e4be785-839a-4a52-a3b9-455f3e289c44",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "1e4be785-839a-4a52-a3b9-455f3e289c45",
                            ConcurrencyStamp = "1e4be785-839a-4a52-a3b9-455f3e289c45",
                            Name = "Reader",
                            NormalizedName = "READER"
                        },
                        new
                        {
                            Id = "1e4be785-839a-4a52-a3b9-455f3e289c46",
                            ConcurrencyStamp = "1e4be785-839a-4a52-a3b9-455f3e289c46",
                            Name = "Writer",
                            NormalizedName = "WRITER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "11872d42-f137-430d-a396-46498fc4e3a7",
                            RoleId = "1e4be785-839a-4a52-a3b9-455f3e289c44"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("BlogAngular.Api.Models.Domain.Comment", b =>
                {
                    b.HasOne("BlogAngular.Api.Models.Domain.BlogPost", "BlogPost")
                        .WithMany("Comments")
                        .HasForeignKey("BlogPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlogAngular.Api.Models.Domain.AppUser", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BlogPost");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BlogAngular.Api.Models.Domain.PostLike", b =>
                {
                    b.HasOne("BlogAngular.Api.Models.Domain.BlogPost", "Post")
                        .WithMany("PostLikes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlogAngular.Api.Models.Domain.AppUser", "User")
                        .WithMany("PostLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BlogAngular.Api.Models.Domain.PostTag", b =>
                {
                    b.HasOne("BlogAngular.Api.Models.Domain.BlogPost", "Post")
                        .WithMany("PostTags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlogAngular.Api.Models.Domain.Tag", "Tag")
                        .WithMany("PostTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("BlogPostCategory", b =>
                {
                    b.HasOne("BlogAngular.Api.Models.Domain.BlogPost", null)
                        .WithMany()
                        .HasForeignKey("BlogPostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlogAngular.Api.Models.Domain.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BlogAngular.Api.Models.Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BlogAngular.Api.Models.Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlogAngular.Api.Models.Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BlogAngular.Api.Models.Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BlogAngular.Api.Models.Domain.AppUser", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("PostLikes");
                });

            modelBuilder.Entity("BlogAngular.Api.Models.Domain.BlogPost", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("PostLikes");

                    b.Navigation("PostTags");
                });

            modelBuilder.Entity("BlogAngular.Api.Models.Domain.Tag", b =>
                {
                    b.Navigation("PostTags");
                });
#pragma warning restore 612, 618
        }
    }
}
