// <auto-generated />
using System;
using BlogAngular.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BlogAngular.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BlogAngular.Api.Models.Domain.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("EncryptedPrivateKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PublicKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "11872d42-f137-430d-a396-46498fc4e3a7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "11872d42-f137-430d-a396-46498fc4e3a7",
                            CreatedDate = new DateTime(2024, 11, 13, 16, 2, 53, 920, DateTimeKind.Utc).AddTicks(3819),
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            EncryptedPrivateKey = "yQGAt91XKk2b40k/OQEkOg==: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",
                            FullName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMe8qwjLEuSrBVloxn5sZu6Yt2JT8zhHw4nfFgfaf7fhCuOrvnsoMJP+QIY+HO19mQ==",
                            PhoneNumberConfirmed = false,
                            PublicKey = "-----BEGIN PUBLIC KEY-----\r\nMIIBCgKCAQEAv5n4cktoXSULn60UdkVnRhAPxa29YuQkJmPcEbmmjA/hjRquSYSOCX/CLXu6lN9CW7Qz6ZmBaorBUzSMEJRFFU0/ix6RPEKcngoi344ZXT4Duq4wWD702FNax+sDxryPqeAMUkrFN2mmEzS3nj/Y4GjxCLP5whZhDlYF16yb+8KaciLfWqh452/sqtzetGYBoCo0CnFvx9896ue4jpJB7zYfKAGW+zxrpNlFDOvfY93r0BdRZ7nafFprgn3tETzGnqetJ84Dp1wmHyinO1xdzbOzhrPHq8kous9/vASb+zepHbbWcxKv19wJJ6gmaKpU4stST7jZVBaXC5dsvcVAFQIDAQAB\r\n-----END PUBLIC KEY-----\r\n",
                            SecurityStamp = "11872d42-f137-430d-a396-46498fc4e3a7",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 11, 13, 16, 2, 53, 920, DateTimeKind.Utc).AddTicks(3823),
                            UserName = "admin@gmail.com"
                        });
                });

            modelBuilder.Entity("BlogAngular.Api.Models.Domain.BlogImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BlogImages");
                });

            modelBuilder.Entity("BlogAngular.Api.Models.Domain.BlogPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FeaturedImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UrlHandle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BlogPosts");
                });

            modelBuilder.Entity("BlogAngular.Api.Models.Domain.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UrlHandle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("BlogAngular.Api.Models.Domain.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BlogPostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BlogPostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("BlogAngular.Api.Models.Domain.PostLike", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("PostLikes");
                });

            modelBuilder.Entity("BlogAngular.Api.Models.Domain.PostTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("TagId");

                    b.ToTable("PostTags");
                });

            modelBuilder.Entity("BlogAngular.Api.Models.Domain.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("BlogPostCategory", b =>
                {
                    b.Property<Guid>("BlogPostsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoriesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BlogPostsId", "CategoriesId");

                    b.HasIndex("CategoriesId");

                    b.ToTable("BlogPostCategory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1e4be785-839a-4a52-a3b9-455f3e289c44",
                            ConcurrencyStamp = "1e4be785-839a-4a52-a3b9-455f3e289c44",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "1e4be785-839a-4a52-a3b9-455f3e289c45",
                            ConcurrencyStamp = "1e4be785-839a-4a52-a3b9-455f3e289c45",
                            Name = "Reader",
                            NormalizedName = "READER"
                        },
                        new
                        {
                            Id = "1e4be785-839a-4a52-a3b9-455f3e289c46",
                            ConcurrencyStamp = "1e4be785-839a-4a52-a3b9-455f3e289c46",
                            Name = "Writer",
                            NormalizedName = "WRITER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "11872d42-f137-430d-a396-46498fc4e3a7",
                            RoleId = "1e4be785-839a-4a52-a3b9-455f3e289c44"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("BlogAngular.Api.Models.Domain.Comment", b =>
                {
                    b.HasOne("BlogAngular.Api.Models.Domain.BlogPost", "BlogPost")
                        .WithMany("Comments")
                        .HasForeignKey("BlogPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlogAngular.Api.Models.Domain.AppUser", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BlogPost");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BlogAngular.Api.Models.Domain.PostLike", b =>
                {
                    b.HasOne("BlogAngular.Api.Models.Domain.BlogPost", "Post")
                        .WithMany("PostLikes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlogAngular.Api.Models.Domain.AppUser", "User")
                        .WithMany("PostLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BlogAngular.Api.Models.Domain.PostTag", b =>
                {
                    b.HasOne("BlogAngular.Api.Models.Domain.BlogPost", "Post")
                        .WithMany("PostTags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlogAngular.Api.Models.Domain.Tag", "Tag")
                        .WithMany("PostTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("BlogPostCategory", b =>
                {
                    b.HasOne("BlogAngular.Api.Models.Domain.BlogPost", null)
                        .WithMany()
                        .HasForeignKey("BlogPostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlogAngular.Api.Models.Domain.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BlogAngular.Api.Models.Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BlogAngular.Api.Models.Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlogAngular.Api.Models.Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BlogAngular.Api.Models.Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BlogAngular.Api.Models.Domain.AppUser", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("PostLikes");
                });

            modelBuilder.Entity("BlogAngular.Api.Models.Domain.BlogPost", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("PostLikes");

                    b.Navigation("PostTags");
                });

            modelBuilder.Entity("BlogAngular.Api.Models.Domain.Tag", b =>
                {
                    b.Navigation("PostTags");
                });
#pragma warning restore 612, 618
        }
    }
}
