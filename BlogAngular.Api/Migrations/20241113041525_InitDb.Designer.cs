// <auto-generated />
using System;
using BlogAngular.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BlogAngular.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241113041525_InitDb")]
    partial class InitDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BlogAngular.Api.Models.Domain.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("EncryptedPrivateKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PublicKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "11872d42-f137-430d-a396-46498fc4e3a7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "11872d42-f137-430d-a396-46498fc4e3a7",
                            CreatedDate = new DateTime(2024, 11, 13, 4, 15, 25, 254, DateTimeKind.Utc).AddTicks(1219),
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            EncryptedPrivateKey = "YEkTWByn07IWK13EjFq+SA==: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",
                            FullName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDjmFETTz1EvJwzosjdaYc/0TpqxKU041kapRrE8+wW6+00ZjLCbV2YcQ42mAtwirg==",
                            PhoneNumberConfirmed = false,
                            PublicKey = "-----BEGIN PUBLIC KEY-----\r\nMIIBITANBgkqhkiG9w0BAQEFAAOCAQ4AMIIBCQKCAQBaBRl6wX8qm/gM9+wimMy6\r\nJNVaqboZZZdcQIEkoUTMnjIwKun1rhCs/QxEUAG0UMMzOTbDK1js3dk0VfSz4t8I\r\nwd6/G4a6vt5eU55V0MGWRZHxDpwWrXwYA7LL63kzHZNaX+Z+9tgfN93tfdhmkNij\r\nrgIdNhdc+XCJItZaUUgXEjDabjsZWileKBoVOtg0FQ6hMfIlABKDHPzHE0+Go3Fo\r\nlR+jpNbUrLvOfcVNNOazayvHnFbpbtn/Kg3bwSekevtj7ImKeIzGbTVGDML+aHDU\r\nIzi+n/A9FgOkqX37E0LvbghaPwskORNAk1boALn73qHUsuSTg3w/oQ25h1lrR7aD\r\nAgMBAAE=\r\n-----END PUBLIC KEY-----",
                            SecurityStamp = "11872d42-f137-430d-a396-46498fc4e3a7",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 11, 13, 4, 15, 25, 254, DateTimeKind.Utc).AddTicks(1223),
                            UserName = "admin@gmail.com"
                        });
                });

            modelBuilder.Entity("BlogAngular.Api.Models.Domain.BlogImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BlogImages");
                });

            modelBuilder.Entity("BlogAngular.Api.Models.Domain.BlogPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FeaturedImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UrlHandle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BlogPosts");
                });

            modelBuilder.Entity("BlogAngular.Api.Models.Domain.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UrlHandle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("BlogAngular.Api.Models.Domain.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BlogPostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BlogPostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("BlogAngular.Api.Models.Domain.PostLike", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("PostLikes");
                });

            modelBuilder.Entity("BlogAngular.Api.Models.Domain.PostTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("TagId");

                    b.ToTable("PostTags");
                });

            modelBuilder.Entity("BlogAngular.Api.Models.Domain.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("BlogPostCategory", b =>
                {
                    b.Property<Guid>("BlogPostsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoriesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BlogPostsId", "CategoriesId");

                    b.HasIndex("CategoriesId");

                    b.ToTable("BlogPostCategory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1e4be785-839a-4a52-a3b9-455f3e289c44",
                            ConcurrencyStamp = "1e4be785-839a-4a52-a3b9-455f3e289c44",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "1e4be785-839a-4a52-a3b9-455f3e289c45",
                            ConcurrencyStamp = "1e4be785-839a-4a52-a3b9-455f3e289c45",
                            Name = "Reader",
                            NormalizedName = "READER"
                        },
                        new
                        {
                            Id = "1e4be785-839a-4a52-a3b9-455f3e289c46",
                            ConcurrencyStamp = "1e4be785-839a-4a52-a3b9-455f3e289c46",
                            Name = "Writer",
                            NormalizedName = "WRITER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "11872d42-f137-430d-a396-46498fc4e3a7",
                            RoleId = "1e4be785-839a-4a52-a3b9-455f3e289c44"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("BlogAngular.Api.Models.Domain.Comment", b =>
                {
                    b.HasOne("BlogAngular.Api.Models.Domain.BlogPost", "BlogPost")
                        .WithMany("Comments")
                        .HasForeignKey("BlogPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlogAngular.Api.Models.Domain.AppUser", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BlogPost");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BlogAngular.Api.Models.Domain.PostLike", b =>
                {
                    b.HasOne("BlogAngular.Api.Models.Domain.BlogPost", "Post")
                        .WithMany("PostLikes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlogAngular.Api.Models.Domain.AppUser", "User")
                        .WithMany("PostLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BlogAngular.Api.Models.Domain.PostTag", b =>
                {
                    b.HasOne("BlogAngular.Api.Models.Domain.BlogPost", "Post")
                        .WithMany("PostTags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlogAngular.Api.Models.Domain.Tag", "Tag")
                        .WithMany("PostTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("BlogPostCategory", b =>
                {
                    b.HasOne("BlogAngular.Api.Models.Domain.BlogPost", null)
                        .WithMany()
                        .HasForeignKey("BlogPostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlogAngular.Api.Models.Domain.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BlogAngular.Api.Models.Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BlogAngular.Api.Models.Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlogAngular.Api.Models.Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BlogAngular.Api.Models.Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BlogAngular.Api.Models.Domain.AppUser", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("PostLikes");
                });

            modelBuilder.Entity("BlogAngular.Api.Models.Domain.BlogPost", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("PostLikes");

                    b.Navigation("PostTags");
                });

            modelBuilder.Entity("BlogAngular.Api.Models.Domain.Tag", b =>
                {
                    b.Navigation("PostTags");
                });
#pragma warning restore 612, 618
        }
    }
}
